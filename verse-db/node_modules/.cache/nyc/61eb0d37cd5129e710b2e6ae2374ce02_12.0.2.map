{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,IAAIG,SAAS;AACTC,cAAW,CAAE;AADJ,CAAb;;AAIA,IAAIC,aAAa;AACbC,eAAWL,MAAMM,GAAN;AADE,CAAjB;;AAIA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAX,KAAKY,UAAL,CAAgB,YAAU;AACtBD,cAAUT,MAAMS,OAAN,CAAcE,MAAd,EAAV;;AAEAJ,gBAAY;AACRK,iBAASH,QAAQH,GAAR;AADD,KAAZ;;AAIA,UAAMO,gBAAgBZ,WAAW,KAAX,EAAkB;AACpC,0BAAkB,MAAMM,SADY;AAEpC,2BAAmB,MAAMH;AAFW,KAAlB,CAAtB;AAIAI,SAAK,MAAMK,cAAcX,MAAd,CAAX;AACH,CAZD;;AAcAJ,KAAKgB,SAAL,CAAe,MAAK;AAChBL,eAAWT,MAAMS,OAAN,CAAcM,OAAd,EAAX;AACH,CAFD;;AAIAjB,KAAK,OAAL,EAAckB,KAAI;AAAA;;AACdA,MAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,cAAnB;AACH,CAFD;;AAIApB,KAAKqB,MAAL,CAAY,OAAZ,EAAoBH,KAAG;AAAA;AAAA;;AACnBA,MAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAgC,iCAAhC;AACAL,MAAEI,IAAF,yBAAO,iEAAWf,SAAX,wBAAqBgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,oCAApC;AACH,CAHD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nlet config = {\n    logging () {}\n}\n\nlet MetricStub = {\n    belongsTo: sinon.spy()\n}\n\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async ()=>{\n    sandbox = sinon.sandbox.create()\n\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n\n    const setupDatabase = proxyquire('../', {\n        './models/agent': () => AgentStub,\n        './models/metric': () => MetricStub\n    })\n    db = await setupDatabase(config)\n})\n\ntest.afterEach(() =>{\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t =>{\n    t.truthy(db.Agent, 'Agent existe')\n})\n\ntest.serial('Setup',t=>{\n    t.true(AgentStub.hasMany.called,'AgentModel.hasMany was executed')\n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n} )\n\n"]}